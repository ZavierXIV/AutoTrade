var draw;
var measure_type='LineString';
var sketch;
var measureTooltipElement;
var helpTooltipElement;
var continuePolygonMsg = '雙擊左鍵結束，右鍵取消';
var continueLineMsg = '雙擊左鍵結束，右鍵取消';
var output;
var typeSelect = document.getElementById('type');
//var geodesicCheckbox = document.getElementById('geodesic');

var wgs84Sphere = new ol.Sphere(6378137);

var raster = new ol.layer.Tile({
    source: new ol.source.MapQuest({layer: 'sat'})
  });

var formatLength = function(line) {
    var length;

      var coordinates = line.getCoordinates();
      length = 0;
      var sourceProj = map.getView().getProjection();
      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {
        var c1 = ol.proj.transform(coordinates[i], sourceProj, 'EPSG:4326');
        var c2 = ol.proj.transform(coordinates[i + 1], sourceProj, 'EPSG:4326');
        length += wgs84Sphere.haversineDistance(c1, c2);
      }

      //length = Math.round(line.getLength() * 100) / 100;

    var output;
//    if (length > 100) {
//      output = (Math.round(length / 1000 * 100) / 100) +
//          ' ' + '公里';
//    } else {
      output = (Math.round(length * 100) / 100) +
          ' ' + '公尺';
//    }
    return output;
  };

var line_source = new ol.source.Vector();

var vector = new ol.layer.Vector({
  source: line_source,
  style: new ol.style.Style({
    fill: new ol.style.Fill({
      /*color: 'rgba(255, 255, 255, 0.2)'*/
    	color: 'rgba(255, 255, 0, 0.2)'
    }),
    stroke: new ol.style.Stroke({
      color: '#ffcc33',
      width: 2
    }),
    image: new ol.style.Circle({
      radius: 7,
      fill: new ol.style.Fill({
        color: '#ffcc33'
      })
    })
  })
});

var drawing=false;
var pointerMoveHandler = function(evt) {
	if(!drawing){
		//$(helpTooltipElement).addClass('hidden');
		$(helpTooltipElement).hide();
		helpTooltipElement.innerHTML = "";
		return;
	}
    if (evt.dragging) {
      return;
    }
    /** @type {string} */
    var helpMsg = '請在地圖上點選測量';

    if (sketch) {
      var geom = (sketch.getGeometry());
      if (geom instanceof ol.geom.Polygon) {
        helpMsg = continuePolygonMsg;
      } else if (geom instanceof ol.geom.LineString) {
        helpMsg = continueLineMsg;
      }
    }

    helpTooltipElement.innerHTML = helpMsg;
    helpTooltip.setPosition(evt.coordinate);

    $(helpTooltipElement).removeClass('hidden');
  };


var formatArea = function(polygon) {
    var area;

      var sourceProj = map.getView().getProjection();
      var geom = /** @type {ol.geom.Polygon} */(polygon.clone().transform(
          sourceProj, 'EPSG:4326'));
      var coordinates = geom.getLinearRing(0).getCoordinates();
      area = Math.abs(wgs84Sphere.geodesicArea(coordinates));

//      area = polygon.getArea();

    var output;
//    if (area > 10000) {
//      output = (Math.round(area / 1000000 * 100) / 100) +
//          //' ' + 'km<sup>2</sup>';
//      ' ' + '平方公里';
//    } else {
      output = (Math.round(area * 100) / 100) +
//          ' ' + 'm<sup>2</sup>';
      ' ' + '平方公尺';
//    }
    return output;
};

var listener;
function addInteraction() {
	drawing=true;
	if(draw!=undefined)
	map.removeInteraction(draw);
    var type =measure_type;
    draw = new ol.interaction.Draw({
      source: line_source,
      type: /** @type {ol.geom.GeometryType} */ (type),
      style: new ol.style.Style({
        fill: new ol.style.Fill({
          color: 'rgba(255, 255, 255, 0.2)'
        }),
        stroke: new ol.style.Stroke({
          color: 'rgba(0, 0, 0, 0.5)',
          lineDash: [10, 10],
          width: 2
        }),
        image: new ol.style.Circle({
          radius: 5,
          stroke: new ol.style.Stroke({
            color: 'rgba(0, 0, 0, 0.7)'
          }),
          fill: new ol.style.Fill({
            color: 'rgba(255, 255, 255, 0.2)'
          })
        })
      })
    });
    map.addInteraction(draw);

    createMeasureTooltip();
    createHelpTooltip();

//    var listener;
    draw.on('drawstart',
        function(evt) {
          // set sketch
          sketch = evt.feature;

          /** @type {ol.Coordinate|undefined} */
          var tooltipCoord = evt.coordinate;

          listener = sketch.getGeometry().on('change', function(evt) {
            var geom = evt.target;
            var output;
            if (geom instanceof ol.geom.Polygon) {
              output = formatArea(geom);
              tooltipCoord = geom.getInteriorPoint().getCoordinates();
            } else if (geom instanceof ol.geom.LineString) {
              output = formatLength(geom);
              tooltipCoord = geom.getLastCoordinate();
            }
            measureTooltipElement.innerHTML = output;
            measureTooltip.setPosition(tooltipCoord);
          });
        }, this);

    draw.on('drawend',
        function() {
          measureTooltipElement.className = 'tooltip tooltip-static';
          measureTooltip.setOffset([0, -7]);
          // unset sketch
          sketch = null;
          // unset tooltip so that a new one can be created
          measureTooltipElement = null;
          createMeasureTooltip();
          ol.Observable.unByKey(listener);
          map.un("pointermove");
         // $(helpTooltipElement).addClass('tooltip hidden');
          map.removeInteraction(draw);
          drawing=false;
//          map.removeOverlay(helpTooltip);
//          map.removeOverlay( measureTooltip);
        
        }, this);
  }


function createHelpTooltip() {
    if (helpTooltipElement) {
      helpTooltipElement.parentNode.removeChild(helpTooltipElement);
    }
    helpTooltipElement = document.createElement('div');
    helpTooltipElement.className = 'tooltip hidden';
    helpTooltip = new ol.Overlay({
      element: helpTooltipElement,
      offset: [15, 0],
      positioning: 'center-left'
    });
    map.addOverlay(helpTooltip);
 }

function createMeasureTooltip() {
    if (measureTooltipElement) {
      measureTooltipElement.parentNode.removeChild(measureTooltipElement);
    }
    measureTooltipElement = document.createElement('div');
    measureTooltipElement.className = 'tooltip tooltip-measure';
    measureTooltip = new ol.Overlay({
      element: measureTooltipElement,
      offset: [0, -15],
      positioning: 'bottom-center'
    });
    map.addOverlay(measureTooltip);
  }
